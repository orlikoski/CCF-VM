version: '3.5'
services:
  nginx:
    image: nginx:1.15
    container_name: nginx
    networks:
      - backend
      - skadi_dockprom_monitor-net
    volumes:
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
      - ./nginx/auth/:/etc/nginx/auth
      - ./nginx/html:/usr/share/nginx/html
      - tssockets:/var/timesketch/
    ports:
      - 80:80
      #- 443:443
    restart: always

  timesketch:
    image: aorlikoski/skadi_timesketch:20190326
    container_name: timesketch
    depends_on:
      - redis
      - elasticsearch
      - postgres
      - neo4j
    environment:
      - TIMESKETCH_USER=${TIMESKETCH_USER}
      - TIMESKETCH_PASSWORD=${TIMESKETCH_PASSWORD}
    networks:
      - backend
    volumes:
      - ./timesketch/timesketch_default.conf:/etc/timesketch.conf
      - tssockets:/var/timesketch/
    restart: always

  postgres:
    image: postgres:11
    container_name: postgres
    networks:
      - backend
    ports:
      - 127.0.0.1:5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always

  redis:
    image: redis:5
    container_name: redis
    networks:
      - backend
    volumes:
      - redisdata:/var/lib/redis
    restart: always

  mongodb:
    image: mongo:4.0
    container_name: mongodb
    environment:
      - MONGO_LOG_DIR=/dev/null
    command: mongod
    networks:
      - backend
    restart: always

  neo4j:
    image: neo4j:3.5
    container_name: neo4j
    networks:
      - backend
    environment:
      - NEO4J_AUTH=none
    volumes:
      - neo4jdata:/var/lib/neo4j/data
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.6.2
    container_name: elasticsearch
    networks:
      - backend
    ports:
      - 127.0.0.1:9200:9200
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms${HEAP_SIZE} -Xmx${HEAP_SIZE}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:6.6.2
    container_name: kibana
    networks:
      - backend
    environment:
      SERVER_BASEPATH: /kibana
    restart: always

  cerebro:
    image: lmenezes/cerebro:0.8.1
    container_name: cerebro
    networks:
      - backend
    restart: always

  cyberchef:
    image: aorlikoski/skadi_cyberchef:20190326
    container_name: cyberchef
    networks:
      - backend
    restart: always

  portainer:
    image: portainer/portainer:1.20.2
    container_name: portainer
    volumes:
      - portainerdata:/data portainer/portainer
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: --no-auth
    networks:
      - backend
    pid: host
    restart: always

  yeti:
    image: aorlikoski/skadi_yeti:20190327
    container_name: yeti
    command: ['docker-entrypoint.sh', 'uwsgi']
    networks:
      - backend
    restart: always
    depends_on:
      - redis
      - mongodb
  yeti-feeds:
    image: aorlikoski/skadi_yeti:20190327
    container_name: yeti-feeds
    command: ['docker-entrypoint.sh', 'feeds']
    networks:
      - backend
    restart: always
    depends_on:
      - redis
      - mongodb
      - yeti
    environment:
      - TLDEXTRACT_CACHE=/tmp/tldextract.cache
  yeti-analytics:
    image: aorlikoski/skadi_yeti:20190327
    container_name: yeti-analytics
    command: ['docker-entrypoint.sh', 'analytics']
    networks:
      - backend
    restart: always
    depends_on:
      - redis
      - mongodb
      - yeti
    environment:
      - TLDEXTRACT_CACHE=/tmp/tldextract.cache
  yeti-beat:
    image: aorlikoski/skadi_yeti:20190327
    container_name: yeti-beat
    command: ['docker-entrypoint.sh', 'beat']
    networks:
      - backend
    restart: always
    depends_on:
      - redis
      - mongodb
      - yeti
  yeti-exports:
    image: aorlikoski/skadi_yeti:20190327
    container_name: yeti-exports
    command: ['docker-entrypoint.sh', 'exports']
    networks:
      - backend
    restart: always
    depends_on:
      - redis
      - mongodb
      - yeti
  yeti-oneshot:
    image: aorlikoski/skadi_yeti:20190327
    container_name: yeti-oneshot
    command: ['docker-entrypoint.sh', 'oneshot']
    networks:
      - backend
    restart: always
    depends_on:
      - redis
      - mongodb
      - yeti

networks:
  backend:
    name: skadi-backend
  skadi_dockprom_monitor-net:
    external:
      name: skadi_dockprom_monitor-net

volumes:
  esdata1:
    driver: local
  neo4jdata:
    driver: local
  pgdata:
    driver: local
  redisdata:
    driver: local
  tssockets:
    driver: local
  portainerdata:
    driver: local
